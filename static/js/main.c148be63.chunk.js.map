{"version":3,"sources":["logo.svg","contexts/SalesContext.jsx","pages/sales/modules/SalesChart.jsx","pages/sales/modules/SalesGraphLegend.jsx","pages/sales/modules/SalesGraph.jsx","pages/sales/modules/ItemDescription.jsx","pages/sales/modules/TopBar.jsx","pages/sales/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SalesContext","React","createContext","useSalesContext","useContext","SalesProvider","props","generateNewGraphPoint","newX","newY","x","y","useState","sales","description","tags","salesData","setSalesData","salesDataDirty","setSalesDataDirty","retailSalesGraphData","wholesaleSalesGraphData","retailerMarginGraphData","maxAmount","setMaxAmount","minAmount","setMinAmount","retailChecked","setRetailChecked","wholesaleChecked","setWholesaleChecked","retailerMarginChecked","setRetailerMarginChecked","Provider","value","getSalesData","fetch","process","method","headers","Headers","Accept","then","r","json","console","log","i","length","retailSales","push","wholesaleSales","retailerMargin","children","SalesChart","salesContext","chartRows","setChartRows","useEffect","newChartRows","id","weekEnding","toLocaleString","undefined","maximumFractionDigits","unitsSold","SalesGraphLegend","renderCheck","checked","onClick","SalesGraph","d3Container","useRef","svg","d3","current","graph","append","xscale","domain","minDate","maxDate","range","yscale","x_axis","ticks","line","call","attr","d","curve","alpha","datum","style","selectAll","remove","className","width","height","ref","ItemDescription","src","image","title","subtitle","TopBar","Sales","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c148be63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useContext} from 'react'\r\n\r\nexport const SalesContext = React.createContext(null)\r\n\r\nexport function useSalesContext() {\r\n    return useContext(SalesContext)\r\n}\r\n\r\nfunction SalesProvider(props) {\r\n\r\n    // function generateNewSalesPoint(newRetailSales, newRetailMargin, newUnitsSold, newWeekEnding, newWholesaleSales) {\r\n    //     return (\r\n    //         {\r\n    //             retailSales: newRetailSales,\r\n    //             retailMargin: newRetailMargin,\r\n    //             unitsSold: newUnitsSold,\r\n    //             weekEnding: newWeekEnding,\r\n    //             wholesaleSales: newWholesaleSales\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n    function generateNewGraphPoint(newX, newY) {\r\n        return ({\r\n            x: newX,\r\n            y: newY\r\n        })\r\n    }\r\n\r\n    const [salesData, setSalesData] = useState({\r\n        sales: [],\r\n        description: \"\",\r\n        tags: [],\r\n\r\n    })\r\n    const [salesDataDirty, setSalesDataDirty] = useState(false)\r\n\r\n    const [retailSalesGraphData, setRetailGraphData] = useState([])\r\n    const [wholesaleSalesGraphData, setWholesaleSalesGraphData] = useState([])\r\n    const [retailerMarginGraphData, setRetailerMarginGraphData] = useState([])\r\n    \r\n    const [maxAmount, setMaxAmount] = useState(1)\r\n    const [minAmount, setMinAmount] = useState(1000000)\r\n\r\n    const [retailChecked, setRetailChecked] = useState(true)\r\n    const [wholesaleChecked, setWholesaleChecked] = useState(false)\r\n    const [retailerMarginChecked, setRetailerMarginChecked] = useState(false)\r\n\r\n    function getSalesData() {\r\n        fetch(`${process.env.PUBLIC_URL}/data/Webdev_data2.json`, {\r\n            method: \"GET\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\"\r\n            })\r\n        }).then(r => {\r\n            return r.json()\r\n        }).then(r => {\r\n            \r\n\r\n            //parsing date string to push to list of sales data\r\n            setSalesData(r[0])\r\n            console.log(r[0])\r\n            for (let i = 0; i < r[0].sales.length; i++) {\r\n                \r\n                if (r[0].sales[i].retailSales > maxAmount) setMaxAmount(r[0].sales[i].retailSales)\r\n                if (r[0].sales[i].retailSales < minAmount) setMinAmount(r[0].sales[i].retailSales)\r\n                retailSalesGraphData.push(generateNewGraphPoint(i, r[0].sales[i].retailSales))\r\n\r\n                if (r[0].sales[i].wholesaleSales > maxAmount) setMaxAmount(r[0].sales[i].wholesaleSales)\r\n                if (r[0].sales[i].wholesaleSales < minAmount) setMinAmount(r[0].sales[i].wholesaleSales)\r\n                wholesaleSalesGraphData.push(generateNewGraphPoint(i, r[0].sales[i].wholesaleSales))\r\n\r\n                if (r[0].sales[i].retailerMargin > maxAmount) setMaxAmount(r[0].sales[i].retailerMargin)\r\n                if (r[0].sales[i].retailerMargin < minAmount) setMinAmount(r[0].sales[i].retailerMargin)\r\n                retailerMarginGraphData.push(generateNewGraphPoint(i, r[0].sales[i].retailerMargin))\r\n\r\n            }\r\n            console.log(\"sales\")\r\n            console.log(salesData)\r\n            setSalesDataDirty(!salesDataDirty)\r\n            \r\n        })\r\n    }\r\n\r\n    return (\r\n        <SalesContext.Provider value={{\r\n            getSalesData,\r\n            salesData,\r\n            salesDataDirty,\r\n            retailSalesGraphData,\r\n            wholesaleSalesGraphData,\r\n            retailerMarginGraphData,\r\n            maxAmount,\r\n            minAmount,\r\n\r\n            retailChecked, setRetailChecked,\r\n            wholesaleChecked, setWholesaleChecked,\r\n            retailerMarginChecked, setRetailerMarginChecked,\r\n        }}>\r\n        {props.children}\r\n        </SalesContext.Provider>\r\n    )\r\n}\r\n\r\nexport default SalesProvider","import React, {useState, useEffect} from 'react'\r\nimport { useSalesContext } from '../../../contexts/SalesContext'\r\nimport '../index.css'\r\n\r\nexport default function SalesChart (props) {\r\n\r\n    const salesContext = useSalesContext()\r\n    const [chartRows, setChartRows] = useState([])\r\n\r\n    useEffect(() => {\r\n        let newChartRows = []\r\n        for (let i = 0; i < salesContext.salesData.sales.length; i++) {\r\n            newChartRows.push(\r\n                <div id=\"DataRow\">\r\n                    <div id=\"DataField\">{salesContext.salesData.sales[i].weekEnding}</div>\r\n                    <div id=\"DataField\">${salesContext.salesData.sales[i].retailSales.toLocaleString(undefined, {maximumFractionDigits:0})}</div>\r\n                    <div id=\"DataField\">${salesContext.salesData.sales[i].wholesaleSales.toLocaleString(undefined, {maximumFractionDigits:0})}</div>\r\n                    <div id=\"DataField\">${salesContext.salesData.sales[i].unitsSold.toLocaleString(undefined, {maximumFractionDigits:0})}</div>\r\n                    <div id=\"DataField\">${salesContext.salesData.sales[i].retailerMargin.toLocaleString(undefined, {maximumFractionDigits:0})}</div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        setChartRows(newChartRows)\r\n    }, [salesContext.salesDataDirty])\r\n\r\n    return (\r\n        <div id=\"SalesChartBox\">\r\n            <div id=\"DataRow\">\r\n                <div id=\"TitleField\">Week Ending</div>\r\n                <div id=\"TitleField\">Retail Sales</div>\r\n                <div id=\"TitleField\">Wholesale Sales</div>\r\n                <div id=\"TitleField\">Units Sold</div>\r\n                <div id=\"TitleField\">Retailer Margin</div>\r\n            </div>\r\n            {chartRows}\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { useSalesContext } from '../../../contexts/SalesContext'\r\nimport '../index.css'\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\r\nexport default function SalesGraphLegend (props) {\r\n\r\n    const salesContext = useSalesContext()\r\n\r\n    function renderCheck(checked) {\r\n        if (checked) return <CheckBoxIcon/>\r\n        else return <CheckBoxOutlineBlankIcon/>\r\n    }\r\n\r\n    return (\r\n        <div id=\"SalesGraphLegendBox\">\r\n            <div id=\"RetailLegendRow\" onClick={() => salesContext.setRetailChecked(!salesContext.retailChecked)}>{renderCheck(salesContext.retailChecked)} \r\n            <div id=\"GraphLegendText\">Retail Sales</div></div>\r\n\r\n            <div id=\"WholesaleLegendRow\" onClick={() => salesContext.setWholesaleChecked(!salesContext.wholesaleChecked)}>{renderCheck(salesContext.wholesaleChecked)}\r\n            <div id=\"GraphLegendText\">Wholesale Sales</div></div>\r\n\r\n            <div id=\"RetailerMarginLegendRow\" onClick={() => salesContext.setRetailerMarginChecked(!salesContext.retailerMarginChecked)}>{renderCheck(salesContext.retailerMarginChecked)}\r\n            <div id=\"GraphLegendText\">Retailer Margin</div></div>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect, useRef} from 'react'\r\nimport { useSalesContext } from '../../../contexts/SalesContext'\r\nimport * as d3 from 'd3'\r\nimport '../index.css'\r\nimport SalesGraphLegend from './SalesGraphLegend'\r\n\r\nexport const SalesGraph = (props) => {\r\n\r\n    const salesContext = useSalesContext()\r\n    const d3Container = useRef(null)\r\n\r\n    let w = 875\r\n    let h = 400\r\n\r\n    useEffect(() => {\r\n        const svg = d3.select(d3Container.current), \r\n            width = w,\r\n            height = h;\r\n\r\n\r\n        let maxAmount = salesContext.maxAmount + 2500000\r\n        let minAmount = salesContext.minAmount - 1000000\r\n        let minDate = 0\r\n        let maxDate = 53\r\n\r\n        let graph = svg.append('g')\r\n\r\n        let xscale = d3.scaleLinear()\r\n            .domain([minDate - 1, maxDate + 1])\r\n            .range([0, width]);\r\n\r\n        let yscale = d3.scaleLinear()\r\n            .domain([minAmount, maxAmount])\r\n            .range([height, 0]);\r\n\r\n        let x_axis = d3.axisBottom(xscale)\r\n            .ticks(10);\r\n\r\n        let y_axis = d3.axisLeft(yscale)\r\n            .ticks()\r\n\r\n        let gX = graph.append('g')\r\n            .call(x_axis)\r\n            .attr(\"transform\", \"translate(0, 380)\")\r\n            .attr(\"color\", \"gray\");\r\n\r\n        var line = d3.line()\r\n            .x(function(d, i) {\r\n                return xscale(d.x);\r\n            })\r\n            .y(function(d, i) {\r\n                return yscale(d.y);\r\n            })\r\n            .curve(d3.curveCatmullRom.alpha(.5));\r\n\r\n\r\n        if (salesContext.retailChecked) {\r\n            graph.append(\"path\")\r\n                .datum(salesContext.retailSalesGraphData)\r\n                .attr(\"class\", \"line\")\r\n                .attr(\"d\", line)\r\n                .attr(\"fill\", \"none\")\r\n                .style(\"stroke\", \"blue\")\r\n                .style(\"stroke-width\", \"2\");\r\n        }\r\n\r\n        if (salesContext.wholesaleChecked) {\r\n            graph.append(\"path\")\r\n                .datum(salesContext.wholesaleSalesGraphData)\r\n                .attr(\"class\", \"line\")\r\n                .attr(\"d\", line)\r\n                .attr(\"fill\", \"none\")\r\n                .style(\"stroke\", \"gray\")\r\n                .style(\"stroke-width\", \"2\");\r\n        }\r\n\r\n        if (salesContext.retailerMarginChecked) {\r\n            graph.append(\"path\")\r\n                .datum(salesContext.retailerMarginGraphData)\r\n                .attr(\"class\", \"line\")\r\n                .attr(\"d\", line)\r\n                .attr(\"fill\", \"none\")\r\n                .style(\"stroke\", \"black\")\r\n                .style(\"stroke-width\", \"2\");\r\n        }\r\n            \r\n        return () => {\r\n            svg.selectAll('*').remove();\r\n        }\r\n    }, [salesContext.salesDataDirty, salesContext.retailChecked, salesContext.wholesaleChecked, salesContext.retailerMarginChecked])\r\n\r\n    \r\n\r\n    return (\r\n        <div id=\"SalesGraphBox\">\r\n            <div id=\"SalesGraphLegendPlacement\"><SalesGraphLegend/></div>\r\n            <svg\r\n                className = \"d3-component\"\r\n                width = {w}\r\n                height = {h}\r\n                ref = {d3Container}\r\n            />\r\n            <div>Week</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SalesGraph","import React, {useState, useEffect} from 'react'\r\nimport { useSalesContext } from '../../../contexts/SalesContext'\r\nimport '../index.css'\r\n\r\nexport default function ItemDescription (props) {\r\n\r\n    const salesContext = useSalesContext()\r\n\r\n    let tags = []\r\n    for (let i = 0; i < salesContext.salesData.tags.length; i++) {\r\n        tags.push(<div id=\"ItemDescriptionTag\">{salesContext.salesData.tags[i]}</div>)\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div id=\"ItemDescriptionBox\">\r\n            <img id=\"ItemImage\" src={salesContext.salesData.image}></img>\r\n            <div id=\"ItemTitle\">{salesContext.salesData.title}</div>\r\n            <div id=\"ItemSubtitle\">{salesContext.salesData.subtitle}</div>\r\n            <div id=\"ItemDescriptionTags\">{tags}</div>\r\n           \r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { useSalesContext } from '../../../contexts/SalesContext'\r\nimport '../index.css'\r\n\r\nexport default function TopBar (props) {\r\n\r\n    return (\r\n        <div id=\"TopBarBox\">\r\n            <div id=\"TopBarTitle\">Stackline Code Assessment</div>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { useSalesContext } from '../../contexts/SalesContext'\r\nimport SalesChart from './modules/SalesChart';\r\nimport SalesGraph from './modules/SalesGraph';\r\nimport ItemDescription from './modules/ItemDescription';\r\nimport TopBar from './modules/TopBar';\r\n\r\n\r\nexport default function Sales (props) {\r\n\r\n    const salesContext = useSalesContext()\r\n\r\n    useEffect(() => {\r\n        salesContext.getSalesData()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <TopBar/>\r\n            <div id=\"ItemDescriptionPlacement\"><ItemDescription/></div>\r\n            <div id=\"SalesGraphPlacement\"><SalesGraph/></div>\r\n            <div id=\"SalesChartPlacement\"><SalesChart/></div>\r\n       </div>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SalesProvider from './contexts/SalesContext'\nimport Sales from './pages/sales';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SalesProvider>\n        <Sales/>\n      </SalesProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}