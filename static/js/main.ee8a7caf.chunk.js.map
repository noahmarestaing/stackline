{"version":3,"sources":["logo.svg","contexts/SalesContext.jsx","pages/sales/modules/SalesChart.jsx","pages/sales/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SalesContext","React","createContext","useSalesContext","useContext","SalesProvider","props","useState","salesData","salesDataDirty","setSalesDataDirty","retailSalesGraphData","Provider","value","getSalesData","fetch","process","method","headers","Headers","Accept","then","r","json","console","log","i","sales","length","push","newX","newY","retailSales","x","y","children","SalesChart","salesContext","chartRows","setChartRows","useEffect","newChartRows","id","weekEnding","toLocaleString","undefined","maximumFractionDigits","wholesaleSales","unitsSold","retailerMargin","Sales","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kJAAAA,EAAOC,QAAU,IAA0B,kC,sICE9BC,EAAeC,IAAMC,cAAc,MAEzC,SAASC,IACZ,OAAOC,qBAAWJ,GAyEPK,MAtEf,SAAuBC,GAAO,MAqBQC,mBAAS,IArBjB,mBAqBnBC,EArBmB,aAsBkBD,oBAAS,IAtB3B,mBAsBnBE,EAtBmB,KAsBHC,EAtBG,OAwByBH,mBAAS,IAxBlC,mBAwBnBI,EAxBmB,aAyBoCJ,mBAAS,KAzB7C,gCA0BoCA,mBAAS,KA1B7C,mBA0D1B,OA1D0B,UA2DtB,kBAACP,EAAaY,SAAd,CAAuBC,MAAO,CAC1BC,aAhCR,WACIC,MAAM,GAAD,OAAIC,aAAJ,2BAAqD,CACtDC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACjB,eAAgB,mBAChBC,OAAQ,uBAEbC,MAAK,SAAAC,GACJ,OAAOA,EAAEC,UACVF,MAAK,SAAAC,GACJE,QAAQC,IAAIH,EAAE,IAGd,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAE,GAAGK,MAAMC,OAAQF,IAOnClB,EAAUqB,KAAKP,EAAE,GAAGK,MAAMD,IAC1Bf,EAAqBkB,MAnCFC,EAmC6BJ,EAnCvBK,EAmC0BT,EAAE,GAAGK,MAAMD,GAAGM,YAlCjE,CACJC,EAAGH,EACHI,EAAGH,KAHX,IAA+BD,EAAMC,EAsC7BrB,GAAmBD,GACnBe,QAAQC,IAAIjB,GACZgB,QAAQC,IAAId,OAOZH,YACAC,iBACAE,yBAEHL,EAAM6B,W,MCrEA,SAASC,EAAY9B,GAEhC,IAAM+B,EAAelC,IAFkB,EAGLI,mBAAS,IAHJ,mBAGhC+B,EAHgC,KAGrBC,EAHqB,KAsBvC,OAjBAC,qBAAU,WAEN,IADA,IAAIC,EAAe,GACVf,EAAI,EAAGA,EAAIW,EAAa7B,UAAUoB,OAAQF,IAC/Ce,EAAaZ,KACT,yBAAKa,GAAG,WACJ,yBAAKA,GAAG,aAAaL,EAAa7B,UAAUkB,GAAGiB,YAC/C,yBAAKD,GAAG,aAAR,IAAsBL,EAAa7B,UAAUkB,GAAGM,YAAYY,oBAAeC,EAAW,CAACC,sBAAsB,KAC7G,yBAAKJ,GAAG,aAAR,IAAsBL,EAAa7B,UAAUkB,GAAGqB,eAAeH,oBAAeC,EAAW,CAACC,sBAAsB,KAChH,yBAAKJ,GAAG,aAAR,IAAsBL,EAAa7B,UAAUkB,GAAGsB,UAAUJ,oBAAeC,EAAW,CAACC,sBAAsB,KAC3G,yBAAKJ,GAAG,aAAR,IAAsBL,EAAa7B,UAAUkB,GAAGuB,eAAeL,oBAAeC,EAAW,CAACC,sBAAsB,OAK5HP,EAAaE,KACd,CAACJ,EAAa5B,iBAGb,6BACI,yBAAKiC,GAAG,WACJ,yBAAKA,GAAG,cAAR,eACA,yBAAKA,GAAG,cAAR,gBACA,yBAAKA,GAAG,cAAR,mBACA,yBAAKA,GAAG,cAAR,cACA,yBAAKA,GAAG,cAAR,oBAEHJ,GC9BE,SAASY,EAAO5C,GAE3B,IAAM+B,EAAelC,IAMrB,OAJAqC,qBAAU,WACNH,EAAavB,iBACd,IAGC,6BACI,kBAACsB,EAAD,OCCGe,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,KACE,kBAACF,EAAD,SCEYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.ee8a7caf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useContext} from 'react'\r\n\r\nexport const SalesContext = React.createContext(null)\r\n\r\nexport function useSalesContext() {\r\n    return useContext(SalesContext)\r\n}\r\n\r\nfunction SalesProvider(props) {\r\n\r\n    // function generateNewSalesPoint(newRetailSales, newRetailMargin, newUnitsSold, newWeekEnding, newWholesaleSales) {\r\n    //     return (\r\n    //         {\r\n    //             retailSales: newRetailSales,\r\n    //             retailMargin: newRetailMargin,\r\n    //             unitsSold: newUnitsSold,\r\n    //             weekEnding: newWeekEnding,\r\n    //             wholesaleSales: newWholesaleSales\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n    function generateNewGraphPoint(newX, newY) {\r\n        return ({\r\n            x: newX,\r\n            y: newY\r\n        })\r\n    }\r\n\r\n    const [salesData, setSalesData] = useState([])\r\n    const [salesDataDirty, setSalesDataDirty] = useState(false)\r\n\r\n    const [retailSalesGraphData, setRetailGraphData] = useState([])\r\n    const [wholesaleSalesGraphData, setWholesaleSalesGraphData] = useState([])\r\n    const [retailerMarginGraphData, setRetailerMarginGraphData] = useState([])\r\n\r\n    function getSalesData() {\r\n        fetch(`${process.env.PUBLIC_URL}/data/Webdev_data2.json`, {\r\n            method: \"GET\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\"\r\n            })\r\n        }).then(r => {\r\n            return r.json()\r\n        }).then(r => {\r\n            console.log(r[0])\r\n\r\n            //parsing date string to push to list of sales data\r\n            for (let i = 0; i < r[0].sales.length; i++) {\r\n                // let month = r[0].sales[i].weekEnding.substring(5, 7)\r\n                // month = parseInt(month, 10) - 1\r\n                // console.log(month)\r\n                // retailSalesGraphData[month].y = retailSalesGraphData[month].y + r[0].sales[i].retailSales\r\n                // salesData[month].retailSales = salesData[month].retailSales + r[0].sales[i].retailSales\r\n                // salesData[month].wholesaleSales = salesData[month].wholesaleSales + r[0].sales[i].wholesaleSales\r\n                salesData.push(r[0].sales[i])\r\n                retailSalesGraphData.push(generateNewGraphPoint(i, r[0].sales[i].retailSales))\r\n\r\n            }\r\n            setSalesDataDirty(!salesDataDirty)\r\n            console.log(salesData)\r\n            console.log(retailSalesGraphData)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <SalesContext.Provider value={{\r\n            getSalesData,\r\n            salesData,\r\n            salesDataDirty,\r\n            retailSalesGraphData,\r\n        }}>\r\n        {props.children}\r\n        </SalesContext.Provider>\r\n    )\r\n}\r\n\r\nexport default SalesProvider","import React, {useState, useEffect} from 'react'\r\nimport { useSalesContext } from '../../../contexts/SalesContext'\r\nimport '../index.css'\r\n\r\nexport default function SalesChart (props) {\r\n\r\n    const salesContext = useSalesContext()\r\n    const [chartRows, setChartRows] = useState([])\r\n\r\n    useEffect(() => {\r\n        let newChartRows = []\r\n        for (let i = 0; i < salesContext.salesData.length; i++) {\r\n            newChartRows.push(\r\n                <div id=\"DataRow\">\r\n                    <div id=\"DataField\">{salesContext.salesData[i].weekEnding}</div>\r\n                    <div id=\"DataField\">${salesContext.salesData[i].retailSales.toLocaleString(undefined, {maximumFractionDigits:0})}</div>\r\n                    <div id=\"DataField\">${salesContext.salesData[i].wholesaleSales.toLocaleString(undefined, {maximumFractionDigits:0})}</div>\r\n                    <div id=\"DataField\">${salesContext.salesData[i].unitsSold.toLocaleString(undefined, {maximumFractionDigits:0})}</div>\r\n                    <div id=\"DataField\">${salesContext.salesData[i].retailerMargin.toLocaleString(undefined, {maximumFractionDigits:0})}</div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        setChartRows(newChartRows)\r\n    }, [salesContext.salesDataDirty])\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"DataRow\">\r\n                <div id=\"TitleField\">Week Ending</div>\r\n                <div id=\"TitleField\">Retail Sales</div>\r\n                <div id=\"TitleField\">Wholesale Sales</div>\r\n                <div id=\"TitleField\">Units Sold</div>\r\n                <div id=\"TitleField\">Retailer Margin</div>\r\n            </div>\r\n            {chartRows}\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from 'react'\r\nimport { useSalesContext } from '../../contexts/SalesContext'\r\nimport SalesChart from './modules/SalesChart';\r\n\r\n\r\nexport default function Sales (props) {\r\n\r\n    const salesContext = useSalesContext()\r\n\r\n    useEffect(() => {\r\n        salesContext.getSalesData()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <SalesChart/>\r\n       </div>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SalesProvider from './contexts/SalesContext'\nimport Sales from './pages/sales';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SalesProvider>\n        <Sales/>\n      </SalesProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}